#########################################
#                Includes               #
#########################################

[include mainsail.cfg]
[include shell_command.cfg]
#[include printer.cfg] # Uncomment if needed


#########################################
#             Core Features             #
#########################################

[exclude_object]       # Enable object exclusion

[gcode_arcs]            # Enable arcs support
resolution: 0.1

[skew_correction]


#########################################
#             Macros - Start            #
#########################################

[gcode_macro START_PRINT]
gcode:
    # Set print stats info
    SET_PRINT_STATS_INFO TOTAL_LAYER=0

    #-------Set Variables-------#
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set PREHEAT_TEMP = BED_TEMP - 7 %}
    {% set EXTRUDER = params.EXTRUDER_TEMP|default(205)|float %}
    {% set extruder_actual = printer.extruder.temperature %}
    {% set MATERIAL = params.MATERIAL|default("PLA") %}

    #-------Initialize-------#
    G21 ; Use mm
    M220 ; Set print speed to 100%
    M221 ; Set Flow Rate to 100%
    M107 ; Disable fans
    G92 E0 ; Set extruder to zero
    SKEW_PROFILE LOAD=CaliFlower
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
    SET_LED LED=Print_Head_LED RED=1 GREEN=0 BLUE=0 ; Turn hotend LEDs red

    #-------Preheat-------#
    RESPOND MSG="Preheating..."
    {% set CURRENT_BED_TEMP = printer["heater_bed"].temperature %}
    {% if CURRENT_BED_TEMP < PREHEAT_TEMP %}
        M190 S{PREHEAT_TEMP} ; Wait for bed to reach preheat temp
    {% else %}
        ; Bed already warm enough, skipping preheat
    {% endif %}
    M140 S{BED_TEMP}

    {% if MATERIAL == "PLA" %}
        M104 S120
    {% else %}
        M104 S150
    {% endif %}

    RESPOND MSG="Preheat Complete!"

    #--------Home and Clear Bed Mesh--------#
    BED_MESH_CLEAR
    CG28
    G90 ; Absolute positioning
    M83 ; Extruder to relative mode

    #-------Bed Mesh-------#
    RESPOND MSG="Calibrating Bed Mesh.."
    SET_LED LED=Print_Head_LED RED=0.7 GREEN=0.7 BLUE=0
    BED_MESH_CALIBRATE
    BED_MESH_PROFILE LOAD=default
    RESPOND MSG="Bed Mesh Calibrated!"

    G91
    G1 Z15.0 F9000
    G90

    #------Final Heat------#
    M106 S0
    RESPOND MSG="Waiting for Hotend..."
    M104 S{EXTRUDER}
    G1 X1 Y2 F6000
    M109 S{EXTRUDER}
    M190 S{BED_TEMP}

    SET_LED LED=Print_Head_LED RED=0.3 GREEN=0.3 BLUE=0.3

    #------Purge------#
    CLEAN_NOZZLE
    G28
    G90
    G1 Z0.3 F300
    G1 X1 Y2 F6000

    G91
    G1 E10 F300
    G1 X8 E12.8 F60
    G90

    G92 E0
    RESPOND MSG="Print Started!"


[gcode_macro END_PRINT]
gcode:
    RESPOND MSG="Print Finished!"
    M117 Print Finished!

    G91
    G1 Z20.0 F9000
    G90

    SET_LED LED=Print_Head_LED RED=0 GREEN=0.5 BLUE=0

    G1 E-3 F1200

    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0

    CLEAN_NOZZLE

    G1 X-3 Y240 Z70 F2000

    M84

    SET_LED LED=Print_Head_LED RED=0 GREEN=0 BLUE=0


[gcode_macro CLEAN_NOZZLE]
variable_start_x: 251
variable_start_y: -7
variable_start_z: 0
variable_wipe_dist_x: 12
variable_wipe_qty: 7
variable_wipe_spd: 6000
gcode:
    {% set max_z = 243 %}
    {% set safe_mode = params.SAFE|default(0)|int %}
    
    ; Home if not homed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G90 ; Absolute positioning

    ; Calculate current safe travel height
    {% set current_z = printer.gcode_move.position.z %}
    {% if current_z < 5 %}
        {% set travel_z = 5 %}
    {% else %}
        {% set travel_z = current_z %}
    {% endif %}
    {% if travel_z > (max_z - 1) %}
        RESPOND TYPE=error MSG="CLEAN_NOZZLE aborted: Current Z height too high ({travel_z}mm)"
        CANCEL
    {% endif %}

    ; If safe_mode is enabled, make sure nozzle lifts higher before moving XY
    {% if safe_mode %}
        G1 Z{travel_z + 10} F1500
    {% else %}
        G1 Z{travel_z} F1500
    {% endif %}

    ; Move to wipe start position
    G1 X{start_x} Y{start_y} F6000
    G1 Z{start_z} F1500

    ; Notify user wiping has started
    RESPOND TYPE=info MSG="CLEAN_NOZZLE: Wiping nozzle..."
    M117 Wiping nozzle...

    ; Wipe nozzle
    {% for wipes in range(wipe_qty) %}
        G1 X{start_x + wipe_dist_x} Y{start_y} F{wipe_spd}
        G1 X{start_x - 1} Y{start_y} F{wipe_spd}
    {% endfor %}

    ; After wiping, move Z upwards
    {% set wipe_end_z = printer.gcode_move.position.z %}
    {% set target_z = wipe_end_z + 5 %}
    {% if target_z < 10 %}
        {% set safe_end_z = 10 %}
    {% elif target_z > max_z %}
        {% set safe_end_z = max_z %}
    {% else %}
        {% set safe_end_z = target_z %}
    {% endif %}
    G1 Z{safe_end_z} F600


#########################################
#           Macros - Utility            #
#########################################

[gcode_macro Load_Filament]
gcode:
    G91
    G1 E200 F800
    G1 E-1 F800
    G90

[gcode_macro Retract_Filament]
gcode:
    G91
    G1 E-150 F800
    G90

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro CG28] # Home if not homed
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro OFF]
gcode:
    M84
    TURN_OFF_HEATERS
    M107
    SET_LED LED=Print-Head_LED RED=0 GREEN=0 BLUE=0
    #SET_FAN_SPEED FAN=Exhaust SPEED=0
    #SET_FAN_SPEED FAN=BedFans SPEED=0
    #SET_PIN PIN=caselight VALUE=0

[gcode_macro M300]
gcode:
    {% set S = params.S|default(260)|int %}
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

[gcode_macro PLAY_TONE]
gcode:
    M300 S10 P100
    M300 S2900 P750

[gcode_macro Calibrate_Eddy_Z]
gcode:
    PROBE_EDDY_CURRENT_CALIBRATE_AUTO CHIP=btt_eddy


#########################################
#             Sensors                   #
#########################################

[filament_switch_sensor switch_sensor]
switch_pin: PG14
runout_gcode:
    PAUSE
    M117 Filament Runout Detected!
    RESPOND MSG="Filament Runout Detected!"

;[filament_motion_sensor encoder_sensor]
;switch_pin: PG15
;detection_length: 2.88
;extruder: extruder
;pause_on_runout: False
;runout_gcode:
;    PAUSE
;    M117 Filament Jam Detected!
;    RESPOND MSG="Filament Jam Detected!"


#########################################
#         Test and Calibration          #
#########################################

[gcode_macro M0]
description: Pause the Active Print
gcode:
    RESPOND MSG="Active Print Paused"
    PAUSE

[gcode_macro TEST_SPEED]
description: Test for max speed and acceleration parameters
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    {% set iterations = params.ITERATIONS|default(5)|int %}
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    {% set bound = params.BOUND|default(20)|int %}
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

    {% set x_min = printer.toolhead.axis_minimum.x + bound %}
    {% set x_max = printer.toolhead.axis_maximum.x - bound %}
    {% set y_min = printer.toolhead.axis_minimum.y + bound %}
    {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    {% set x_center = (printer.toolhead.axis_minimum.x + printer.toolhead.axis_maximum.x) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y + printer.toolhead.axis_maximum.y) / 2 %}
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}

    SAVE_GCODE_STATE NAME=TEST_SPEED
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    M400
    G28

    {% if printer.configfile.settings.quad_gantry_level %}
        {% if printer.quad_gantry_level.applied == False %}
            QUAD_GANTRY_LEVEL
            G28 Z
        {% endif %}
    {% endif %}

    G90
    G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F1800
    M400
    G28 X Y
    G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F1800
    G4 P1000
    GET_POSITION

    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}

        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}

        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    GET_POSITION
    RESTORE_GCODE_STATE NAME=TEST_SPEED
